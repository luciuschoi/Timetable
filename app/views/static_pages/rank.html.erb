
<div style = "width:1000px;
  margin-left:auto;
  margin-right:auto;">

  <div style = "width:840px;
    margin : 10px auto;">
    <%= render 'timetables/table_form' %>
    
    <div class = "search_box" style = "margin : 20px 0; text-align :center">
      <%= form_tag rank_path, :method => 'get', :class =>'form-inline',
        :style => 'text-align:center; display:inline' do %>
          <%= text_field_tag :search,params[:search], placeholder: :"과목 또는 교수님명을 입력해주세요!", :class => 'form-control  form-group', :style => "width:40%" %>
          <%= submit_tag "검색", :name => nil, :class =>'btn btn-success', :style =>"width:8%;" %>
      <% end %>
          <%= link_to '추천 강의', propose_path, remote: true, :class => 'btn btn-danger', :style => "display: inline; width:5%; padding-top:8px; padding-bottom:8px"%>
    </div>

    <div class = "table_search" style = "text-align:center; width:500px; margin : 0 auto">
      <%= render 'search_table', :lectures => @lectures %>
    </div> <!-- 검색 결과 -->

    <div style = "text-align : center"> 검색결과가 없습니다.. </div>

  </div>
</div>

<script>
  timetable = $('#timetable');

  function duplicate_lecture(s_row, e_row, col)
  {
    var tf_var;
    var col_num;
    for (h=0; h<col.length; h++){
      col_num = col[h]+")";
      for(i=s_row; i<=e_row; i++)
      {
        var row_num = i+")";
        var time_row = timetable.find('tbody tr:nth-child('+row_num);
        var lecture_cell = time_row.find('td:nth-child('+col_num);
        
        var tester = $(lecture_cell).hasClass('lec');
        if(tester == true)
        {
          break;
        }
        
      }
      if (tester == true) break;
    }
    return tester;
  }

  function alert_branch(which_alert)
  {
    $('.alert-container').prepend('<div> </div>');
    var alert_element = $('.alert-container div:first-child');
    alert_element.addClass('alert');

    // $('.alert').removeClass('alert-danger');
    // $('.alert').removeClass('alert-warning');
    // $('.alert').removeClass('alert-success');

    //var class_name;

    if (which_alert == 'add_success')
    {
      alert_element.addClass('alert-success');
      alert_element.css('display', 'block').html('강의가 추가 되었습니다.');
      setTimeout(function(){
        alert_element.fadeOut("slow");
      }, 2000);    
    }
    else if (which_alert == 'del_success')
    {
      alert_element.addClass('alert-warning');
      alert_element.css('display', 'block').html('강의가 삭제 되었습니다.');
      setTimeout(function(){
        alert_element.fadeOut("slow");
      }, 2000);    
    }
    else if (which_alert == 'duplicate')
    {
      alert_element.addClass('alert-danger');
      alert_element.css('display', 'block').html('다른 강의와 시간이 겹치는 강의입니다.');
      setTimeout(function(){
        alert_element.fadeOut("slow");
      }, 2000);    
    }

  } // alert_branch func.

  // 시간표에 담을 강의를 클릭하면, timetable에서 해당 강의가
  // 속한 행과 열을 결정한다.
	$(".table_search tr").click(function(){
    $(this).off('mouseout');
    $(this).off('hover');
		var data = $(this).find('.lecture_time').html();
		
    data = split_text(data);

    // d_col | 요일 저장하는 배열 
    // s_row | 시작시간 
    // e_row | 종료시간 
    var d_col = find_day_td(data[0]);
    var s_row = find_begin_time_row(data[1]);
    var e_row = find_end_time_row(data[2]);
    
    var lec_id = $(this).attr('class').split('_')[1];
    var lec_name = $(this).find('.subject').html();
    var lec_professor = $(this).find('.professor').html();
    var lec_place = $(this).find('.professor').html();

    var duplicate_var = duplicate_lecture(s_row, e_row, d_col);
    var event_string = 'click';
    // DB 저장을 위한 ajax 전송
    if (duplicate_var == true)
    {
      alert_branch('duplicate');  
    }
    else
    {
      default_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor, lec_place, event_string);
      send_lecture_to_timetable(s_row,e_row,d_col,lec_id);
    }
	});


  $(".table_search tbody tr").mouseenter(function(){
    
    var data = $(this).find('.lecture_time').html();
        data = split_text(data);

    var d_col = find_day_td(data[0]);
    var s_row = find_begin_time_row(data[1]);
    var e_row = find_end_time_row(data[2]);
        
    var lec_id = $(this).attr('class').split('_')[1];
    var lec_name = ""; 
    var lec_professor = ""; 
    
    hover_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor);
  });


  $(".table_search tbody tr").mouseleave(function(){
    var del_class = $(this).attr('class');
    delete_timetable_cell_background(del_class);
  });

  // 강의시간을 요일/시작시간/끝시간 배열 3개로 쪼개서 return
  function split_text(data) 
  {
    // replace에서의 day를 1개 요일 vs 2개 요일로 비교해서 값을 따로 줘야한다.
    // 요일이 1개 ex)화 인경우
    if (data.length <= 12)
    {
      var day = data[0];
    }
    // 요일이 2개 ex)화목 인 경우
    else if (data.length <= 13)
    {
      var day = data[0]+data[1];
    }
    else{}

    data = data.replace(day,day+"-");
    data = data.split('-');   
    // data[0] 요일, data[1] 시작시간, data[2] 끝시간.
    return data;
  }


  // timetable에서 강의 시간(행)을 찾습니다.
  function find_begin_time_row(s_time)
  { 
    var rows = timetable.find('tbody th');
    var refined_time = s_time.split(":");
    var row_num;

    rows.each(function(){
      var row_each_time = $(this).find('div').html();
      
      if( refined_time[0] == row_each_time ){
        row_num = rows.index(this);
        return;
      }
      else {      }
    });
    if (refined_time[1] == '30') return row_num+2;
    else return row_num+1;
  }

  function find_end_time_row (e_time)
  {
    var rows = timetable.find('tbody th');
    var refined_time = e_time.split(":");
    var row_num;

    rows.each(function(){
      var row_each_time = $(this).find('div').html();
      
      if( refined_time[0] == row_each_time ){
        row_num = rows.index(this);
        return;
      }
      else {      }
    });
    if (refined_time[1] == '30') return row_num+1;
    else return row_num;
  }

  // 요일을 기준으로 몇열에 해당하는지 찾아 열값을 리턴.
  function find_day_td(day)
  {
    var t_datas = timetable.find('thead th'); 
    var td_num = [];

    for (i=0; i<day.length; i++){
      t_datas.each(function() {
        td_each_data = $(this).html();
        
        if (td_each_data == day[i]){
          td_num.push(t_datas.index(this)+1);
        } 
        else{}
      });
    }
    // nth:child 때문에 열값에 +1을 해야됨.
    return td_num;
  }

  // 인자로 받은 시간/요일을 기준으로 background 채웁니다.
  function hover_fill_cell(s_row, e_row, col, lec_id, lec_name, lec_professor)
  {
    var col_num;
    var row_num;
    var time_row;
    var lecture_cell;

    for (h=0; h<col.length; h++)
    {
      col_num = col[h]+")";
      for(i=s_row; i<=e_row; i++)
      {
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        lecture_cell = time_row.find('td:nth-child('+col_num);
        var tester = $(lecture_cell).hasClass('lec');
        // span 태그 내에 텍스트가 있다면 = 테이블 셀 내에 강의가 추가되있다면 css 적용
        if(tester == true)  
        {
          lecture_cell.css('background','#fff3f2').css('outline','1px solid #ec4e2c');
          lecture_cell.addClass('lec_'+lec_id);

        }
        // 테이블 셀 내부에 강의가 추가되있지 않을 때 css 적용
        else
        {
          lecture_cell.css('background','#fffae5');
          lecture_cell.addClass('lec_'+lec_id); 
        }
      }
    }
  }

  function default_fill_cell(s_row, e_row, col, lec_id, lec_name, lec_professor, lec_place, event_string)
  {
    var col_num;
    var row_num;
    var time_row;
    var lecture_cell;
    // 클릭(빈셀, 채워진 셀)과 첫 로드 구분
    for (h=0; h<col.length; h++)
    {
      col_num = col[h]+")";

        
        // 
        for (i=s_row+1; i<=e_row; i++)
        {
          row_num = i+")";
          time_row = timetable.find('tbody tr:nth-child('+row_num);
          lecture_cell = time_row.find('td:nth-child('+col_num);
          $(lecture_cell).css('display', 'none'); 
          lecture_cell.addClass('lec_'+lec_id);
          lecture_cell.addClass('lec');
        }
        var i = s_row;
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        
        lecture_cell = time_row.find('td:nth-child('+col_num);

        lecture_cell.attr('rowspan', e_row - s_row + 1);



        lecture_cell.css('border', '1px solid white');

        if (event_string == 'ready')
        {
          lecture_cell.css('background','#fef1e6'); // 이거 
        }
        else if (event_string == 'click')
        {
          lecture_cell.css('background','black');
        }

        lecture_cell.addClass('lec_'+lec_id); 
        lecture_cell.addClass('lec');



        mix_cell_text(lecture_cell, lec_id,lec_name,lec_professor, lec_place);  
    }
  }

  function mix_cell_text(lec_cell, lec_id, lec_name, lec_professor, lec_place)
  {

    var completed_content;
    var content_box;      // span을 wrap중인 div 박스
    var span_ln;          // div박스 안의 강의명           span
    var span_lp;          // div박스 안의 교수명 span
    var span_pl;          // div박스 안의 장소명 span
    var span_info;        //            해당 강의평가 바로가기 span
    var span_del;         //            삭제 span

    content_box = '<div class = lec_box></div>';
    
    span_pl     = '<span class = lec_place> </span>';
    span_lp     = '<span class = lec_professor> </span>';
    span_ln     = '<span class = lec_name> </span>';
    span_del    = '<span class = del_btn> </span>';
    a_info      = '<a> </a>'
    span_info   = '<span class = info_btn> </span>';

    var contents = [lec_name, lec_professor, lec_place];

    // 1 element 추가
    // 2 class 추가
    // 3 value 추가


    $(lec_cell).prepend(content_box);
    content_box = $(lec_cell).find('div');
    $(content_box).addClass('lec_'+lec_id);

    $(content_box).prepend(span_pl).prepend(span_lp).prepend(span_ln);

    // content_box.find('span').each (function(){
    //   $(this).html() = contents
    // });

    for(var i = 0; i < contents.length; i++)
    {
      var temp_span = $(content_box).find('span')[i];
      $(temp_span).css('display','inline-block');
      $(temp_span).html(contents[i]);
    }

    $(content_box).append(span_info).append(span_del);
    $(content_box).find('.del_btn').addClass('glyphicon glyphicon-remove');
    $(content_box).find('.info_btn').addClass('glyphicon glyphicon-info-sign');

    
    $(content_box).find('.info_btn').wrap(a_info);
    $('.info_btn').parent().attr('href', 'http://localhost:3000/lectures/'+lec_id);

  }

  // function mix_cell_text(lec_id, lec_name, lec_professor, lec_place)
  // {
  //   var  del_btn = "<a > X </a>";
  //   var completed_content;
  //   var content_box;      // span을 wrap중인 div 박스
  //   var lec_name;         // div박스 안의 강의명 span
  //   var lec_professor;    // div박스 안의 교수명 span
  //   var lec_place;        // div박스 안의 장소명 span

  //   if (lec_place == null)
  //   {
  //     completed_content = "<div class = lec_" + lec_id + ">" + "<span>"+lec_name + "</span> <br>" + lec_professor +"  " + del_btn + "</div>";  
  //   }
  //   else
  //   {
  //     completed_content = "<div class = lec_" + lec_id + ">" + lec_name + " <br>" + lec_professor + "<br>" +lec_place  + " " + del_btn + "</div>";  
  //   }
    
  //   return completed_content;
  // }

  
  function send_lecture_to_timetable(s_row,e_row,d_col,lec_id) {
    $.ajax({
        url:'<%= add_timetable_url %>',
        type:'post',
        data:{'begin_time':s_row, 'end_time':e_row, 'days':d_col,
              'lecture_id':lec_id},
        success:function()
        {
          alert_branch('add_success');
        },
        error:function()
        {
          alert_branch('duplicate');
        }

    });
  }
  $('body').on('click','.lessons > .table-striped > tbody > tr > td > div > .del_btn' ,function(event){
      
      var del_class = $(this).parent().parent().attr('class').split(' ');

      delete_timetable_cell(del_class[0]);

      var del_id = del_class[0].split('_');

      $.ajax({
          url:'<%= delete_timetable_url %>',
          type:'delete',
          data:{'lecture_id':del_id[1]},
          success:function()
          {
            // <div class="alert alert-%= message_type %>">%= message %></div> 
            alert_branch('del_success');
          },
          error:function()
          {
            alert('삭제 실패했습니다... 다시 삭제 눌러주세요 ㅠㅠ');
          }
      });
  })


  function delete_timetable_cell_background(del_class_name)
  {
    // lec_id 는 지워질 cell의 클래스 이름 
    var del_cell = $('.lessons').find('.'+del_class_name);
    
    del_cell.each (function(){
        $(this).css('background', '');
        $(this).css('outline','0');
    });
  }

  function delete_timetable_cell(del_class_name){
    // lec_id 는 지워질 cell의 클래스 이름 
    var del_cell = $('.lessons').find('td.'+del_class_name);

    del_cell.each (function(){
      var contents_box = $(this).find('div');
      if ( $(contents_box).length >= 1 )
      {
        $(contents_box).find('span.'+del_class_name).html(''); 
        $(this).attr('rowspan', '0');
      }
      else
      {
        $(this).css('display', 'table-cell');
      }
      $(this).css('background', '');
      $(this).html('');
      $(this).css('border', '0');
      $(this).removeClass('lec');
      // 만약, span태그가 있으면 (=해당 시간에 강의가 등록되있다.) backgroud green
    });
  }
  // 웹페이지 로드시, 현재 유저가 등록한 강의를 시간표에 보여준다.
  jQuery( document ).ready(function( $ )
  {   
    // s_row | 강의 시작시간
    // e_row | 강의 종료시간
    
    var lec_id;
    var lec_name;
    var lec_professor;
    var lec_place;
    var event_string = 'ready';
    <% @lectures_in_timetable.each do |lec_in_timetable| %>
      
      var s_row = <%= lec_in_timetable.begin_time %>;
      var e_row = <%= lec_in_timetable.end_time %>;
      
      var d_col=[];
      
      // 강의 시간이 하루인 경우
      if (<%= lec_in_timetable.days.length%> <= 1){
        d_col.push("<%= lec_in_timetable.days[0] %>");
      }
      // 강의 시간이 이틀인 경우 (화,목 / 수,금)
      else if (<%= lec_in_timetable.days.length%> <= 2){
        d_col.push("<%= lec_in_timetable.days[0] %>");
        d_col.push("<%= lec_in_timetable.days[1] %>");
      }

      <% l = Lecture.find(lec_in_timetable.lecture_id) %>
      lec_id = <%= l.id %>;
      lec_name = "<%= l.subject %>";
      lec_professor = "<%= l.professor %>";
      lec_place = "<%= l.place %>";

      // 처음 html 로드시, 사용자가 시간표에 등록한 강의들을 timetable cell에 채우는 함수 
      default_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor, lec_place, event_string);
    <% end %>
  }); 
</script>






