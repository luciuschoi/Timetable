  <div class="left-container">
  <div class="upper-group">


    <button class="btn btn-default btn-add">

      <i class="glyphicon glyphicon-plus"><B> 추가</B></i>
    </button>

    <button class="btn btn-default btn-copy">
        <i class="glyphicon glyphicon-plus-sign"><B>복사</B></i>
    </button>

  </div>

  <div class="low-group">
        <span class="dropdown timetable_dropdown">
          <button class="btn-share btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
               <i class="glyphicon glyphicon-share" style="color:white;">
                    <B> 공유</B>
               </i>

               <span class="caret"></span>
          </button>

          <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
            <li><a href="#" >페이스북 공유</a></li>
            <li><a href="#" id="save_image_locally">이미지 저장 </a></li>
            <li><a href="javascript:;" id="kakao-link-btn"><%=image_tag "talk.png"%>카카오톡 공유</a></li>
          </ul>

        </span>  
      <button class="btn btn-del">
          <i class="glyphicon glyphicon-minus-sign"><B> 삭제</B> </i>
      </button>
      
  </div>
  </div>

  <div class="center-container">
    <div>
       <%= render 'timetables/table_form' %>

    </div>
  </div>


  <div class="right-container">
      <div class = "search_box">
              <%= form_tag rank_path, :method => 'get', :class =>'form-inline rank-form' do %>
                  <%= text_field_tag :search,params[:search], placeholder: :"과목 또는 교수님명을 입력해주세요!", :class => 'form-control  form-group rank-textf',:id=> 'textfield'%>
                  <%= button_tag(type: "submit", class: "btn btn-default btn-search", :id=> 'searchbtn') do %>
                  <i class="glyphicon glyphicon-search"></i>
                  <%end%>
              <% end %>
                 <%= button_tag(class: "btn btn-default btn-favorite") do %>
                  <i class="glyphicon glyphicon-star"></i>
                 <%end %>
          
          
      </div>
    
      <%= render 'search_table', :lectures => @lectures %>

         <!-- 검색 결과 -->
        <% if @lectures.nil? %> 
          <div style = "text-align : center"> 검색결과가 없습니다.. </div>
        <%end%> 
    </div>
  </div>


  <div class = "my_cart_container">
    <div style = "width : 80%">
      <%= render 'timetables/my_cart_table' %>
    </div>
  </div>





  

<script>

  // 사용할 앱의 JavaScript 키를 설정해 주세요.
    Kakao.init('8af2fccfaf9fe878576de125c4ba83eb');

    // 카카오톡 링크 버튼을 생성합니다. 처음 한번만 호출하면 됩니다.
    Kakao.Link.createTalkLinkButton({
      container: '#kakao-link-btn',
      label: '세종대 강의정보공유 사이트 구경오세요.',
      image: {
        src: 'http://xn--oy1bw5jn8ijte.com/assets/logo2-bfa40186d9f501f9483243509d751037a6da6190d053cef4cc15f1221d3ed4b1.png', //카카오톡에 보여질 이미지 
        width: '300',
        height: '200'
      },
      webButton: {
        text: '아뭐듣지.com',
        url: 'http://xn--oy1bw5jn8ijte.com' // 앱 설정의 웹 플랫폼에 등록한 도메인의 URL이어야 합니다.
      }
    });

  $('.glyphicon-star').click(function (){
     
      textfield.value ="인기강의"
      $("#searchbtn").click();

  });


//이미지 저장하는 코드 
  $('#save_image_locally').click(function() {

      html2canvas($('.target'),
           {
             letterRendering:true,
             logging:true, 
             background:"white",
              onrendered: function(canvas) {
                 var a = document.createElement('a');
                a.href = canvas.toDataURL("image/jpeg").replace("image/jpeg", "image/octet-stream");
                 a.download = '아뭐듣지시간표.jpg';
                 a.click();
              }

          });
    });
  timetable = $('#timetable');
/*
  function duplicate_lecture(s_row, e_row, col)
  {
    var tf_var;
    for (h=0; h<col.length; h++){
      col_num = col[h]+")";
      for(i=s_row; i<=e_row; i++)
      {
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        lecture_cell = time_row.find('td:nth-child('+col_num);
        
        var tester = $(lecture_cell).hasClass('lec');
        if(tester == true)
        {
          break;
        }
        
      }
      if (tester == true) break;
    }
    return tester;
  }
  // 시간표에 담을 강의를 클릭하면, timetable에서 해당 강의가
  // 속한 행과 열을 결정한다.
  $(".table_search tr").click(function(){
    $(this).off('mouseout');
    $(this).off('hover');
    var data = $(this).find('.lecture_time').html();
    
    data = split_text(data);

    // d_col | 요일 저장하는 배열 
    // s_row | 시작시간 
    // e_row | 종료시간 
    var d_col = find_day_td(data[0]);
    var s_row = find_begin_time_row(data[1]);
    var e_row = find_end_time_row(data[2]);
    
    var lec_id = $(this).attr('class').split('_')[1];
    var lec_name = $(this).find('.subject').html();
<<<<<<< HEAD
    duplicate_var lec_professor = $(this).find('.professor').html();
=======
    var lec_professor = $(this).find('.professor').html();
    lec_professor = lec_professor.split('/')[0];
    var lec_place = $(this).find('.place').html();
    var lec_isu = $(this).find('.isu').html();

    var duplicated_lec_name = duplicate_lecture_name(s_row, e_row, d_col);
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642

    var duplicate_var = duplicate_lecture(s_row, e_row, d_col);
    
    // DB 저장을 위한 ajax 전송
<<<<<<< HEAD
    if (duplicate_var == true)
=======
    if (duplicated_lec_name != 'false')
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
    {
      alert('중복된 강의시간표 입니다..ㅠㅠ');
    }
    else
    {
<<<<<<< HEAD
=======
      default_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor, lec_place, event.type);
      make_cell_in_my_cart_table(lec_id, lec_name, lec_professor, lec_isu);
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
      send_lecture_to_timetable(s_row,e_row,d_col,lec_id);
      click_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor);
    }

  });


<<<<<<< HEAD

  $(".table_search tbody tr").mouseenter(function(){
=======
  $('body').on('mouseenter', '.search_box .list-group',function(event){
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
    
    var data = $(this).find('.lecture_time').html();
        data = split_text(data);

    var d_col = find_day_td(data[0]);
    var s_row = find_begin_time_row(data[1]);
    var e_row = find_end_time_row(data[2]);
        
    var lec_id = $(this).attr('class').split('_')[1];
    var lec_name = ""; 
    var lec_professor = ""; 
    
    hover_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor);
  });


  $(".table_search tbody tr").mouseleave(function(){
    del_class = $(this).attr('class');
    delete_timetable_cell_background(del_class);
  });

  // 강의시간을 요일/시작시간/끝시간 배열 3개로 쪼개서 return
  function split_text(data) 
  {
    // replace에서의 day를 1개 요일 vs 2개 요일로 비교해서 값을 따로 줘야한다.
    // 요일이 1개 ex)화 인경우
    if (data.length <= 12)
    {
      day = data[0];
    }
    // 요일이 2개 ex)화목 인 경우
    else if (data.length <= 13)
    {
      day = data[0]+data[1];
    }
    else{}

    data = data.replace(day,day+"-");
    data = data.split('-');   
    // data[0] 요일, data[1] 시작시간, data[2] 끝시간.
    return data;
  }


  // timetable에서 강의 시간(행)을 찾습니다.
  function find_begin_time_row(s_time)
  { 
    var rows = timetable.find('tbody th');
    var refined_time = s_time.split(":");
    var row_num;

    rows.each(function(){
      var row_each_time = $(this).find('div').html();
      
      if( refined_time[0] == row_each_time ){
        row_num = rows.index(this);
        return;
      }
      else {      }
    });
    if (refined_time[1] == '30') return row_num+2;
    else return row_num+1;
  }

  function find_end_time_row (e_time)
  {
    var rows = timetable.find('tbody th');
    var refined_time = e_time.split(":");
    var row_num;

    rows.each(function(){
      var row_each_time = $(this).find('div').html();
      
      if( refined_time[0] == row_each_time ){
        row_num = rows.index(this);
        return;
      }
      else {      }
    });
    if (refined_time[1] == '30') return row_num+1;
    else return row_num;
  }

  // 요일을 기준으로 몇열에 해당하는지 찾아 열값을 리턴.
  function find_day_td(day)
  {
    t_datas = timetable.find('thead th'); 
    var td_num = [];

    for (i=0; i<day.length; i++){
      t_datas.each(function() {
        td_each_data = $(this).html();
        
        if (td_each_data == day[i]){
          td_num.push(t_datas.index(this)+1);
        } 
        else{}
      });
    }
    // nth:child 때문에 열값에 +1을 해야됨.
    return td_num;
  }

  // 인자로 받은 시간/요일을 기준으로 background 채웁니다.
  function hover_fill_cell(s_row, e_row, col, lec_id, lec_name, lec_professor)
  {
    for (h=0; h<col.length; h++)
    {
      col_num = col[h]+")";
      for(i=s_row; i<=e_row; i++)
      {
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        lecture_cell = time_row.find('td:nth-child('+col_num);
        var tester = $(lecture_cell).hasClass('lec');
        // span 태그 내에 텍스트가 있다면 = 테이블 셀 내에 강의가 추가되있다면 css 적용
        if(tester == true)  
        {
<<<<<<< HEAD
          lecture_cell.css('background','#fff3f2').css('outline','1px solid #ec4e2c');
          lecture_cell.addClass('lec_'+lec_id);

=======
          // lecture_cell.css('background','#eeeeee');
          lecture_cell.addClass('not_duplicated');
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
        }
        // 테이블 셀 내부에 강의가 추가되있지 않을 때 css 적용
        else
        {
<<<<<<< HEAD
          lecture_cell.css('background','#fffae5');
          lecture_cell.addClass('lec_'+lec_id); 
=======
          first_cells = find_timetableLecture_First_cell(extract_lec_id_from_class( $(lecture_cell) )); 
          $(first_cells).each (function(){
            //$(this).css('background','#fff3f2 !important').css('outline','1px solid #ec4e2c');
            // $(this).addClass('lec_'+lec_id);
            $(this).addClass('duplicated');
          });
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
        }
      }
    }
  }

  function default_fill_cell(s_row, e_row, col, lec_id, lec_name, lec_professor)
  {
    // 클릭(빈셀, 채워진 셀)과 첫 로드 구분
    var c_index = decide_cell_color();

    for (h=0; h<col.length; h++)
    {
      col_num = col[h]+")";
      //for(i=s_row; i<=e_row; i++)
      //{
        // rowspan용 for문
        for (i=s_row+1; i<=e_row; i++)
        {
          row_num = i+")";
          time_row = timetable.find('tbody tr:nth-child('+row_num);
          lecture_cell = time_row.find('td:nth-child('+col_num);
          $(lecture_cell).css('display', 'none');
          lecture_cell.addClass('lec_'+lec_id);
          lecture_cell.addClass('lec');
        }
        var i = s_row;
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        
        lecture_cell = time_row.find('td:nth-child('+col_num);

<<<<<<< HEAD
=======
        lecture_cell.addClass('lec_'+lec_id); 
        lecture_cell.addClass('lec');

>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
        lecture_cell.attr('rowspan', e_row - s_row + 1);

        lecture_cell.css('border', '1px solid white');
        lecture_cell.css('background','#cfe5e4');
        lecture_cell.addClass('lec_'+lec_id); 
        lecture_cell.addClass('lec');


        if(lecture_cell.find('span').length >= 1)
        {
<<<<<<< HEAD
          existed_text = lecture_cell.html() + "<br>";
          lecture_cell.html(existed_text + mix_cell_text(lec_id,lec_name, lec_professor));
=======
          lecture_cell.addClass('c'+c_index);
          //lecture_cell.css('background','#fef1e6'); // 이거 
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
        }
        else
        {
<<<<<<< HEAD
          lecture_cell.html(mix_cell_text(lec_id,lec_name,lec_professor));  
        }
      //}
=======
          lecture_cell.addClass('temporary_fill');

        }

        mix_cell_text(lecture_cell, lec_id,lec_name,lec_professor, lec_place);  
    }
  }

  // 셀 백그라운드 컬러 배열에서 index 결정
  function decide_cell_color()
  {
    // my_cart_table에서 tbody의 tr 개수 저장
    // tr 개수 / cell 개수 
    // return 0,1,2,3,4,5
    var my_cart_trs = $('.my_cart_container').find('tbody tr');
    var index = 0;

    for (var i = 0; i < my_cart_trs.length; i++) 
    {
      if($(my_cart_trs[i]).hasClass('has'))
      {
        index++;
      }
    }
    $(my_cart_trs[index]).addClass('has');

    index = index % 6;

    return index;
  }

  function make_cell_in_my_cart_table(lec_id, lec_name, lec_professor, lec_isu)
  {
    var t_body = $('#my_cart_table').find('tbody');

    var tr_contents;
    var td_subject;
    var td_professor;
    var td_isu;
    var td_del_btn;
    var span_glyphicon;

    tr_contents   = '<tr class = t_contents> </tr>';
    td_subject    = '<td></td>';
    td_professor  = '<td class = professor> </td>';
    td_isu        = '<td class = isu></td>';
    td_del_btn    = '<td class = del_btn></td>';
    span_glyphicon= '<span class = glyphicon></span>';

    var td_contents    = [lec_name, lec_professor, lec_isu, span_glyphicon];

    $(t_body).append(tr_contents);
    var tr_container = $(t_body).find('tr:last-child');

    tr_container.append(td_subject).append(td_professor).append(td_isu).append(td_del_btn);
    
    for (var i = 0; i < td_contents.length; i++) 
    {
      var temp_td = $(tr_container).find('td')[i];
      $(temp_td).html(td_contents[i]);
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
    }
    $(tr_container).addClass('lec_'+lec_id);
    $(tr_container).find('td:last-child span').addClass('glyphicon-remove');
    
  }
//onclick = del_btn_click();
  function mix_cell_text(lec_id, lec_name, lec_professor)
  {
    var  del_btn = "<a > X </a>";
    completed_content = "<span class = lec_" + lec_id + ">" + lec_name + " <br>"
                          + lec_professor + " " + del_btn + "</span>";

    return completed_content;
  }

<<<<<<< HEAD
  function click_fill_cell(s_row, e_row, col, lec_id, lec_name, lec_professor)
  {
    for (h=0; h<col.length; h++){
      col_num = col[h]+")";

        for (i=s_row+1; i<=e_row; i++)
        {
          row_num = i+")";
          time_row = timetable.find('tbody tr:nth-child('+row_num);
          lecture_cell = time_row.find('td:nth-child('+col_num);
          $(lecture_cell).css('display', 'none');
        }
        var i = s_row;
        row_num = i+")";
        time_row = timetable.find('tbody tr:nth-child('+row_num);
        lecture_cell = time_row.find('td:nth-child('+col_num);
        lecture_cell.attr('rowspan', e_row - s_row + 1);
        // if(lecture_cell.find('span').length >= 1)  
        // {
        //   lecture_cell.css('background','#cfe5e4');
        //   lecture_cell.addClass('lec_'+lec_id);
=======
    $(lec_cell).prepend(content_box);
    content_box = $(lec_cell).find('div');
    $(content_box).addClass('lec_'+lec_id);
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642

        //   existed_text = lecture_cell.html() + "<br>";

<<<<<<< HEAD
        //   lecture_cell.html(existed_text + mix_cell_text(lec_id, lec_name, lec_professor));

        // }
        // else
        // {
          lecture_cell.css('background','#0d9c90');
          lecture_cell.addClass('lec_'+lec_id); 
          lecture_cell.addClass('lec');
          lecture_cell.html(mix_cell_text(lec_id,lec_name, lec_professor));
        // }
        lecture_cell.css('border', '1px solid white');
=======
    for(var i = 0; i < contents.length; i++)
    {
      var temp_span = $(content_box).find('span')[i];
      $(temp_span).css('display','inline-block');
      $(temp_span).html(contents[i]);
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
    }
  }

  
  function send_lecture_to_timetable(s_row,e_row,d_col,lec_id) {
    $.ajax({
        url:'<%= add_timetable_url %>',
        type:'post',
        data:{'begin_time':s_row, 'end_time':e_row, 'days':d_col,
              'lecture_id':lec_id},
        success:function()
        {
          
        },
        error:function()
        {
          alert('이미 등록된 강의입니다.');
        }

    });
  }
  $('body').on('click','.lessons > .table-striped > tbody > tr > td > span > a' ,function(event){
    del_class = $(this).parent().attr('class');

      delete_timetable_cell(del_class);

<<<<<<< HEAD
      del_id = del_class.split('_');
=======

  $('body').on('click', '.lessons > .table-striped > tbody > tr > td > div > .del_btn' ,dynamic_delete);
  $('body').on('click', '.my_cart_container #my_cart_table .t_contents .del_btn' ,dynamic_delete);

  function dynamic_delete() {
    var del_class = $(this).parent().attr('class').split(' ');

      delete_timetable_cell(del_class[1]);
      delete_cart_table_cell(del_class[1]);

      var del_id = del_class[1].split('_');
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642

      $.ajax({
          url:'<%= delete_timetable_url %>',
          type:'delete',
<<<<<<< HEAD
          data:{'lecture_id':del_id[1]}
      });
  })
  // function del_btn_click() {
  //   //$('.lessons > .table-striped > tbody > tr > td > span > a')//.click(function()
  //   //{
  //     // 1 선택한 객체 지우기
  //     // 2 선택한 객체와 같은 클래스명(lec_id)을 가진 cell도 똑같이 적용.
  //     del_class = $(this).parent().attr('class');

  //     delete_timetable_cell(del_class);

  //     del_id = del_class.split('_');

  //     $.ajax({
  //         url:'<%= delete_timetable_url %>',
  //         type:'delete',
  //         data:{'lecture_id':del_id[1]}
  //     });
  //   //});
  // }

  function delete_timetable_cell_background(del_class_name)
  {
    // lec_id 는 지워질 cell의 클래스 이름 
    del_cell = $('.lessons').find('.'+del_class_name);
    
    del_cell.each (function(){
      // 만약, span태그가 있으면 (=해당 시간에 강의가 등록되있다.) backgroud green
      if ( $(this).find('span').length >= 1 ) 
      {
        $(this).css('background', '#cfe5e4')
        $(this).css('outline','0'); 
      }
      else
      {
        $(this).css('background', '');
        $(this).css('outline','0');
      }

    });
=======
          data:{'lecture_id':del_id[1]},
          success:function()
          {
            alert_branch('del_success');
          },
          error:function()
          {
            alert('삭제 실패했습니다... 다시 삭제 눌러주세요 ㅠㅠ');
          }
      });
  }

  function delete_timetable_cell_background(del_class_name)
  {
    var del_cell = $('.lessons').find('.duplicated');
    var c_index = decide_cell_color();

    del_cell.each (function(){
        $(this).removeClass('duplicated');
    });

    del_cell = $('.lessons').find('.not_duplicated');
    
    del_cell.each (function(){
        $(this).removeClass('temporary_fill');
        $(this).removeClass('not_duplicated');
        if ($(this).hasClass('lec'))
        {
          $(this).addClass('c'+c_index);
        }
    });    
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
  }

  function delete_timetable_cell(del_class_name){
    // lec_id 는 지워질 cell의 클래스 이름 
    del_cell = $('.lessons').find('td.'+del_class_name);

    del_cell.each (function(){
      if ( $(this).find('span').length >= 1 )
      {
        $(this).css('background', '');
        $(this).find('span.'+del_class_name).html(''); 
        $(this).attr('rowspan', '0');
      }
      else
      {
        $(this).css('background', '');
        $(this).css('display', 'table-cell');
      }
<<<<<<< HEAD
      $(this).html('');
      $(this).css('border', '0');
      $(this).removeClass('lec');
=======
      $(this).css('background', ' ').css('color', ' ');
      $(this).html('');
      $(this).css('border', '0');
      $(this).removeClass();
>>>>>>> 2349dc0992278a50504a15da412ef61d01c11642
      // 만약, span태그가 있으면 (=해당 시간에 강의가 등록되있다.) backgroud green
    });
  }

  function delete_cart_table_cell(del_class_name)
  {
    var del_cell = $('.my_cart_container').find('tr.'+del_class_name);
    $(del_cell).remove();

  }



  // 웹페이지 로드시, 현재 유저가 등록한 강의를 시간표에 보여준다.
  jQuery( document ).ready(function( $ )
  {   
    // s_row | 강의 시작시간
    // e_row | 강의 종료시간
    <% @lectures_in_timetable.each do |lec_in_timetable| %>
      
      s_row = <%= lec_in_timetable.begin_time %>;
      e_row = <%= lec_in_timetable.end_time %>;
      
      d_col = [];
      // 강의 시간이 하루인 경우
      if (<%= lec_in_timetable.days.length%> <= 1){
        d_col.push("<%= lec_in_timetable.days[0] %>");
      }
      // 강의 시간이 이틀인 경우 (화,목 / 수,금)
      else if (<%= lec_in_timetable.days.length%> <= 2){
        d_col.push("<%= lec_in_timetable.days[0] %>");
        d_col.push("<%= lec_in_timetable.days[1] %>");
      }

      <% l = Lecture.find_by(lec_in_timetable.lecture_id) %>
      lec_id = <%= l.id %>;
      lec_name = "<%= l.subject %>";
      lec_professor = "<%= l.professor %>";

      // 처음 html 로드시, 사용자가 시간표에 등록한 강의들을 timetable cell에 채우는 함수 
      default_fill_cell(s_row, e_row, d_col, lec_id, lec_name, lec_professor);
    <% end %>
  }); */
</script>






